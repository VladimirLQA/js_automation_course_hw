/*
* 1. На вход функции подаётся предложение, например “I am the best AQA ever!” Преобразуйте строку таким образом,
  чтобы вместо каждой буквы была цифра, показывающая сколько раз эта буква встречается в предложении.
  Пробелы и знаки препинания оставляем без изменения. Регистр не должен играть роли.

2. У вас есть массив с ценами товаров в чеке. В консоль нужно вывести сумму всех цен и среднюю цену товара.
  Итого: 8495 $, средняя цена товара 700 $ - пример сообщения в консоле.
  const prices = [64, 7556, 345, 7556, 345, 7556, 345, 7556, 433, 345, 756, 123, 942, 3112, 421, 9341, 1212, 8, 43, 41, 345, 341, 21, 321, 123];

3. Написать функцию, которая принимает на вход строку с текстом, и заменяет каждую пару идентичных букв на одну следующую в алфавите,
   и так пока в тексте не останется двух одинаковых букв стоящих рядом (через пробел и другой знак препинания можно)
  Пример: aabc => bbc => cc => d

4. У вас есть массив со скобками, предположим [ ‘(‘, ‘)’, ‘(‘, ‘)’, ‘)’], количество элементов и последовательность может быть разной.
  Нужно выяснить, у каждой ли скобки есть соответствующая пара (открывающая и закрывающая).
  Усложнение: в массиве могут быть вложены еще массивы на разной глубине. (ПОПРОБУЙТЕ МЕТОД .flat(), изучите как он работает с разными глубинами вложенности)
  Вернуть нужно всё также есть ли у каждой скобочки соответствующая пара.
  Пример:
  const arr = [[['(']], ')', '(', ')', ')', ['(', ['('], [')']]]

5*. Для решения задачи вам понадобится разобраться с возможность доступа к ключам объекта через квадратные скобки.
  У вас есть список неотсортированный массив заказов пицц за неделю.
  Напишите функцию, которая принимает на вход массив заказов, поле для сортировки (name или price) и направление сортировки (ASC или DESC).
  Вернуть массив, отсортированный по данному полю.

  const orders = [
    {
      name: 'Caprichosa',
      size: large,
      price: 50,
      date: 2023/02/26
    },
    {
      name: 'Diablo',
      size: medium,
      price: 35,
      date: 2023/02/23
    },
    {
      name: 'Peperoni',
      size: small,
      price: 20,
      date: 2023/02/21
    },
    {
      name: 'Hawai',
      size: large,
      price: 45,
      date: 2023/02/27
    }
  ]

6**. В файле вы найдете массив карточек юзеров. Задача - создать функцию, которая уберет из массива дубликаты.
  Вернуть массив с сугубо уникальными карточками. Реализовать методом SET.
  Разобраться, как считать данные из файла КОДОМ, а не копировать ручками.*/

const log = console.log;

{
    log(`================================== Task 1 =========================================`);
    {
        function numberOfOccurrencesLettersInSentence(sentence) {
            let result = [];
            let lowerCase = sentence.toLowerCase().split('');
            for (let i = 0; i < lowerCase.length; i++) {
                let char = lowerCase[i];
                if (char >= 'a' && char <= 'z') {
                    result.push(lowerCase.filter(el => el === char).length)
                } else {
                    result.push(char);
                }
            }
            return result.join('')
        }
        log(numberOfOccurrencesLettersInSentence('I am the best AQA ever!'));
    }
        log(`=====================================`);
    {
        function numberOfOccurrencesLettersInSentence(sentence) {
            const charCount = {};
            const transformed = [];

            for (let i = 0; i < sentence.length; i++) {
                const char = sentence[i].toLowerCase();
                if (char >= 'a' && char <= 'z') {
                    charCount[char] = (charCount[char] || 0) + 1;
                }
            }

            for (let i = 0; i < sentence.length; i++) {
                const char = sentence[i].toLowerCase();
                if (char >= 'a' && char <= 'z') {
                    const count = charCount[char];
                    transformed.push(count);
                } else {
                    transformed.push(sentence[i]);
                }
            }

            return transformed.join('');
        }

        log(numberOfOccurrencesLettersInSentence('I am the best AQA ever!'));
    }


}

{
    log(`================================== Task 2 =========================================`);

    {
        const prices = [64, 7556, 345, 7556, 345, 7556, 345, 7556, 433, 345, 756, 123, 942, 3112, 421, 9341, 1212, 8, 43, 41, 345, 341, 21, 321, 123];

        function sumAvg(arr) {
            if (!arr || !Array.isArray(arr)) return `Value not passed or not valid`;
            let sum = arr.slice().reduce((sum, price) => sum + price, 0);
            let avg = sum / arr.length;
            return `Итого: ${sum}$, средняя цена товара ${Math.trunc(avg)}$`;
        }

        log(sumAvg(prices));
        log(sumAvg());
        log(sumAvg('dfd'));
    }

}

{
    log(`================================== Task 3 =========================================`);
}

{
    log(`================================== Task 4 =========================================`);
}

{
    log(`================================== Task 5 =========================================`);
}

{
    log(`================================== Task 6 =========================================`);
}